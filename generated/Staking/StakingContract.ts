// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class REGISTERED extends ethereum.Event {
  get params(): REGISTERED__Params {
    return new REGISTERED__Params(this);
  }
}

export class REGISTERED__Params {
  _event: REGISTERED;

  constructor(event: REGISTERED) {
    this._event = event;
  }

  get _userAdd(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _referredBy(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class STAKED extends ethereum.Event {
  get params(): STAKED__Params {
    return new STAKED__Params(this);
  }
}

export class STAKED__Params {
  _event: STAKED;

  constructor(event: STAKED) {
    this._event = event;
  }

  get staker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class WITHDRAW extends ethereum.Event {
  get params(): WITHDRAW__Params {
    return new WITHDRAW__Params(this);
  }
}

export class WITHDRAW__Params {
  _event: WITHDRAW;

  constructor(event: WITHDRAW) {
    this._event = event;
  }

  get withdrawer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class StakingContract__getUserFundsResultValue0Struct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get balance(): BigInt {
    return this[1].toBigInt();
  }

  get createdAt(): BigInt {
    return this[2].toBigInt();
  }

  get lastWithdrawal(): BigInt {
    return this[3].toBigInt();
  }

  get timeLeft(): BigInt {
    return this[4].toBigInt();
  }
}

export class StakingContract__stakedBalanceResultTotalWithdrawalStruct extends ethereum.Tuple {
  get amountWithdrawan(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get twTs(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get refWtihdrawalCommission(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get wcTs(): Array<BigInt> {
    return this[3].toBigIntArray();
  }
}

export class StakingContract__stakedBalanceResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: StakingContract__stakedBalanceResultTotalWithdrawalStruct;
  value7: BigInt;
  value8: BigInt;
  value9: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: StakingContract__stakedBalanceResultTotalWithdrawalStruct,
    value7: BigInt,
    value8: BigInt,
    value9: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromTuple(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    return map;
  }
}

export class StakingContract__userDetailsResultReferralsStruct extends ethereum.Tuple {
  get refBalances(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get rbTs(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get referralEarnings(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get reTs(): Array<BigInt> {
    return this[3].toBigIntArray();
  }
}

export class StakingContract__userDetailsResult {
  value0: Address;
  value1: StakingContract__userDetailsResultReferralsStruct;
  value2: BigInt;
  value3: boolean;

  constructor(
    value0: Address,
    value1: StakingContract__userDetailsResultReferralsStruct,
    value2: BigInt,
    value3: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromTuple(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    return map;
  }
}

export class StakingContract__userFundDetailsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class StakingContract extends ethereum.SmartContract {
  static bind(address: Address): StakingContract {
    return new StakingContract("StakingContract", address);
  }

  _checkAntiWhaleTaxes(_amount: BigInt): BigInt {
    let result = super.call(
      "_checkAntiWhaleTaxes",
      "_checkAntiWhaleTaxes(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_amount)]
    );

    return result[0].toBigInt();
  }

  try__checkAntiWhaleTaxes(_amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_checkAntiWhaleTaxes",
      "_checkAntiWhaleTaxes(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_amount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  checkMaxEarnings(): BigInt {
    let result = super.call(
      "checkMaxEarnings",
      "checkMaxEarnings():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_checkMaxEarnings(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "checkMaxEarnings",
      "checkMaxEarnings():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  checkMaxWithdrawal(): BigInt {
    let result = super.call(
      "checkMaxWithdrawal",
      "checkMaxWithdrawal():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_checkMaxWithdrawal(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "checkMaxWithdrawal",
      "checkMaxWithdrawal():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  checkTotalEarnings(): BigInt {
    let result = super.call(
      "checkTotalEarnings",
      "checkTotalEarnings():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_checkTotalEarnings(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "checkTotalEarnings",
      "checkTotalEarnings():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getContractBalance(): BigInt {
    let result = super.call(
      "getContractBalance",
      "getContractBalance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getContractBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getContractBalance",
      "getContractBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserFunds(
    _user: Address
  ): Array<StakingContract__getUserFundsResultValue0Struct> {
    let result = super.call(
      "getUserFunds",
      "getUserFunds(address):((uint256,uint256,uint256,uint256,uint256)[])",
      [ethereum.Value.fromAddress(_user)]
    );

    return result[0].toTupleArray<
      StakingContract__getUserFundsResultValue0Struct
    >();
  }

  try_getUserFunds(
    _user: Address
  ): ethereum.CallResult<
    Array<StakingContract__getUserFundsResultValue0Struct>
  > {
    let result = super.tryCall(
      "getUserFunds",
      "getUserFunds(address):((uint256,uint256,uint256,uint256,uint256)[])",
      [ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<StakingContract__getUserFundsResultValue0Struct>()
    );
  }

  isActive(): boolean {
    let result = super.call("isActive", "isActive():(bool)", []);

    return result[0].toBoolean();
  }

  try_isActive(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isActive", "isActive():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  levelInfo(param0: BigInt): BigInt {
    let result = super.call("levelInfo", "levelInfo(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_levelInfo(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("levelInfo", "levelInfo(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stakedBalance(param0: Address): StakingContract__stakedBalanceResult {
    let result = super.call(
      "stakedBalance",
      "stakedBalance(address):(uint256,uint256,uint256,uint256,uint256,uint256,(uint256[],uint256[],uint256[],uint256[]),uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new StakingContract__stakedBalanceResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      changetype<StakingContract__stakedBalanceResultTotalWithdrawalStruct>(
        result[6].toTuple()
      ),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toBigInt()
    );
  }

  try_stakedBalance(
    param0: Address
  ): ethereum.CallResult<StakingContract__stakedBalanceResult> {
    let result = super.tryCall(
      "stakedBalance",
      "stakedBalance(address):(uint256,uint256,uint256,uint256,uint256,uint256,(uint256[],uint256[],uint256[],uint256[]),uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new StakingContract__stakedBalanceResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        changetype<StakingContract__stakedBalanceResultTotalWithdrawalStruct>(
          value[6].toTuple()
        ),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toBigInt()
      )
    );
  }

  userDetails(param0: Address): StakingContract__userDetailsResult {
    let result = super.call(
      "userDetails",
      "userDetails(address):(address,(uint256[5],uint256[5],uint256[5],uint256[5]),uint256,bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new StakingContract__userDetailsResult(
      result[0].toAddress(),
      changetype<StakingContract__userDetailsResultReferralsStruct>(
        result[1].toTuple()
      ),
      result[2].toBigInt(),
      result[3].toBoolean()
    );
  }

  try_userDetails(
    param0: Address
  ): ethereum.CallResult<StakingContract__userDetailsResult> {
    let result = super.tryCall(
      "userDetails",
      "userDetails(address):(address,(uint256[5],uint256[5],uint256[5],uint256[5]),uint256,bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new StakingContract__userDetailsResult(
        value[0].toAddress(),
        changetype<StakingContract__userDetailsResultReferralsStruct>(
          value[1].toTuple()
        ),
        value[2].toBigInt(),
        value[3].toBoolean()
      )
    );
  }

  userFundDetails(
    param0: Address,
    param1: BigInt
  ): StakingContract__userFundDetailsResult {
    let result = super.call(
      "userFundDetails",
      "userFundDetails(address,uint256):(uint256,uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new StakingContract__userFundDetailsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_userFundDetails(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<StakingContract__userFundDetailsResult> {
    let result = super.tryCall(
      "userFundDetails",
      "userFundDetails(address,uint256):(uint256,uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new StakingContract__userFundDetailsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ActiveContractCall extends ethereum.Call {
  get inputs(): ActiveContractCall__Inputs {
    return new ActiveContractCall__Inputs(this);
  }

  get outputs(): ActiveContractCall__Outputs {
    return new ActiveContractCall__Outputs(this);
  }
}

export class ActiveContractCall__Inputs {
  _call: ActiveContractCall;

  constructor(call: ActiveContractCall) {
    this._call = call;
  }
}

export class ActiveContractCall__Outputs {
  _call: ActiveContractCall;

  constructor(call: ActiveContractCall) {
    this._call = call;
  }
}

export class CalculateDailyEarningsCall extends ethereum.Call {
  get inputs(): CalculateDailyEarningsCall__Inputs {
    return new CalculateDailyEarningsCall__Inputs(this);
  }

  get outputs(): CalculateDailyEarningsCall__Outputs {
    return new CalculateDailyEarningsCall__Outputs(this);
  }
}

export class CalculateDailyEarningsCall__Inputs {
  _call: CalculateDailyEarningsCall;

  constructor(call: CalculateDailyEarningsCall) {
    this._call = call;
  }
}

export class CalculateDailyEarningsCall__Outputs {
  _call: CalculateDailyEarningsCall;

  constructor(call: CalculateDailyEarningsCall) {
    this._call = call;
  }

  get _earnings(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CalculateReferalEarningsCall extends ethereum.Call {
  get inputs(): CalculateReferalEarningsCall__Inputs {
    return new CalculateReferalEarningsCall__Inputs(this);
  }

  get outputs(): CalculateReferalEarningsCall__Outputs {
    return new CalculateReferalEarningsCall__Outputs(this);
  }
}

export class CalculateReferalEarningsCall__Inputs {
  _call: CalculateReferalEarningsCall;

  constructor(call: CalculateReferalEarningsCall) {
    this._call = call;
  }
}

export class CalculateReferalEarningsCall__Outputs {
  _call: CalculateReferalEarningsCall;

  constructor(call: CalculateReferalEarningsCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CheckTotalEarningsCall extends ethereum.Call {
  get inputs(): CheckTotalEarningsCall__Inputs {
    return new CheckTotalEarningsCall__Inputs(this);
  }

  get outputs(): CheckTotalEarningsCall__Outputs {
    return new CheckTotalEarningsCall__Outputs(this);
  }
}

export class CheckTotalEarningsCall__Inputs {
  _call: CheckTotalEarningsCall;

  constructor(call: CheckTotalEarningsCall) {
    this._call = call;
  }
}

export class CheckTotalEarningsCall__Outputs {
  _call: CheckTotalEarningsCall;

  constructor(call: CheckTotalEarningsCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PauseContractCall extends ethereum.Call {
  get inputs(): PauseContractCall__Inputs {
    return new PauseContractCall__Inputs(this);
  }

  get outputs(): PauseContractCall__Outputs {
    return new PauseContractCall__Outputs(this);
  }
}

export class PauseContractCall__Inputs {
  _call: PauseContractCall;

  constructor(call: PauseContractCall) {
    this._call = call;
  }
}

export class PauseContractCall__Outputs {
  _call: PauseContractCall;

  constructor(call: PauseContractCall) {
    this._call = call;
  }
}

export class RegisterUserCall extends ethereum.Call {
  get inputs(): RegisterUserCall__Inputs {
    return new RegisterUserCall__Inputs(this);
  }

  get outputs(): RegisterUserCall__Outputs {
    return new RegisterUserCall__Outputs(this);
  }
}

export class RegisterUserCall__Inputs {
  _call: RegisterUserCall;

  constructor(call: RegisterUserCall) {
    this._call = call;
  }

  get referrer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RegisterUserCall__Outputs {
  _call: RegisterUserCall;

  constructor(call: RegisterUserCall) {
    this._call = call;
  }
}

export class StakeBnbCall extends ethereum.Call {
  get inputs(): StakeBnbCall__Inputs {
    return new StakeBnbCall__Inputs(this);
  }

  get outputs(): StakeBnbCall__Outputs {
    return new StakeBnbCall__Outputs(this);
  }
}

export class StakeBnbCall__Inputs {
  _call: StakeBnbCall;

  constructor(call: StakeBnbCall) {
    this._call = call;
  }
}

export class StakeBnbCall__Outputs {
  _call: StakeBnbCall;

  constructor(call: StakeBnbCall) {
    this._call = call;
  }
}

export class WithdrawBalacneCall extends ethereum.Call {
  get inputs(): WithdrawBalacneCall__Inputs {
    return new WithdrawBalacneCall__Inputs(this);
  }

  get outputs(): WithdrawBalacneCall__Outputs {
    return new WithdrawBalacneCall__Outputs(this);
  }
}

export class WithdrawBalacneCall__Inputs {
  _call: WithdrawBalacneCall;

  constructor(call: WithdrawBalacneCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawBalacneCall__Outputs {
  _call: WithdrawBalacneCall;

  constructor(call: WithdrawBalacneCall) {
    this._call = call;
  }
}

export class WithdrawContractBalanceCall extends ethereum.Call {
  get inputs(): WithdrawContractBalanceCall__Inputs {
    return new WithdrawContractBalanceCall__Inputs(this);
  }

  get outputs(): WithdrawContractBalanceCall__Outputs {
    return new WithdrawContractBalanceCall__Outputs(this);
  }
}

export class WithdrawContractBalanceCall__Inputs {
  _call: WithdrawContractBalanceCall;

  constructor(call: WithdrawContractBalanceCall) {
    this._call = call;
  }
}

export class WithdrawContractBalanceCall__Outputs {
  _call: WithdrawContractBalanceCall;

  constructor(call: WithdrawContractBalanceCall) {
    this._call = call;
  }
}

export class WithdrawOwnBonusCall extends ethereum.Call {
  get inputs(): WithdrawOwnBonusCall__Inputs {
    return new WithdrawOwnBonusCall__Inputs(this);
  }

  get outputs(): WithdrawOwnBonusCall__Outputs {
    return new WithdrawOwnBonusCall__Outputs(this);
  }
}

export class WithdrawOwnBonusCall__Inputs {
  _call: WithdrawOwnBonusCall;

  constructor(call: WithdrawOwnBonusCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawOwnBonusCall__Outputs {
  _call: WithdrawOwnBonusCall;

  constructor(call: WithdrawOwnBonusCall) {
    this._call = call;
  }
}

export class WithdrawReferralBonusCall extends ethereum.Call {
  get inputs(): WithdrawReferralBonusCall__Inputs {
    return new WithdrawReferralBonusCall__Inputs(this);
  }

  get outputs(): WithdrawReferralBonusCall__Outputs {
    return new WithdrawReferralBonusCall__Outputs(this);
  }
}

export class WithdrawReferralBonusCall__Inputs {
  _call: WithdrawReferralBonusCall;

  constructor(call: WithdrawReferralBonusCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawReferralBonusCall__Outputs {
  _call: WithdrawReferralBonusCall;

  constructor(call: WithdrawReferralBonusCall) {
    this._call = call;
  }
}

export class WithdrawReferralCommissionCall extends ethereum.Call {
  get inputs(): WithdrawReferralCommissionCall__Inputs {
    return new WithdrawReferralCommissionCall__Inputs(this);
  }

  get outputs(): WithdrawReferralCommissionCall__Outputs {
    return new WithdrawReferralCommissionCall__Outputs(this);
  }
}

export class WithdrawReferralCommissionCall__Inputs {
  _call: WithdrawReferralCommissionCall;

  constructor(call: WithdrawReferralCommissionCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawReferralCommissionCall__Outputs {
  _call: WithdrawReferralCommissionCall;

  constructor(call: WithdrawReferralCommissionCall) {
    this._call = call;
  }
}
